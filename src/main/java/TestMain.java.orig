import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;

import com.google.common.collect.Lists;
import com.microsoft.z3.BoolExpr;
import com.microsoft.z3.Context;
import com.microsoft.z3.IntExpr;
import com.microsoft.z3.Solver;
import com.microsoft.z3.Status;

import difflib.DiffUtils;
import difflib.Patch;
import grammar.BoogieASTVisitor;
import grammar.BoogieASTVisitorInfoCollector;
import grammar.BoogieGrammar;
import grammar.ConcreteInput;
import incrementalBoogie.grammar.BoogieLexer;
import incrementalBoogie.grammar.BoogieParser;
import parser.IncrementalParser;

public class TestMain {
	
	
	
	private class CodeVersion {
		private int versionNumber = -1;
		private HashSet<String> variablesModified = new HashSet<String>();
		private HashSet<String> registeredMethods = new HashSet<String>();
		private List<ConcreteInput> sourceCode;
		
		CodeVersion(int versionNumber, String programCode) {
			this.versionNumber = versionNumber;
			sourceCode = generateSource(programCode);
		}
		
		private void printSource(){
			System.out.println("===================================================================");
			System.out.println("Source program version: "+versionNumber);
			System.out.println(sourceCode);
			System.out.println("===================================================================");
		}
		
		private void addProcedure(String method){
			registeredMethods.add(method);
		}
	}
	public static String version = "version0";
	public static BoogieASTVisitor astWalker = new BoogieASTVisitor();
	public static BoogieASTVisitorInfoCollector astInfoCollector = new BoogieASTVisitorInfoCollector();
	public static Context context = new Context();
	
	public static Solver solver; // probably move to nonstatic later
	public static boolean DEBUG = true;
	
//	public static int currentVersion = 0;
//	public static HashSet<String> prevVersionModified = new HashSet<String>();
	public static ArrayList<HashSet<String>> prevVersionModified = new ArrayList<HashSet<String>>();
	public static HashSet<String> currVersionModified = new HashSet<String>();
	
	
	

	private int currentIteration;
	private static ArrayList<CodeVersion> allCodeIterations;
	private IncrementalParser parser;
	private BoogieSidecarVisitor sidecarVisitor;
	
	public TestMain() {
		currentIteration = -1;
		allCodeIterations = new ArrayList<CodeVersion>();
		
		BoogieGrammar.getInstance(); // not sure if needed
		parser = new IncrementalParser(BoogieGrammar.getInstance().getGrammar());
		sidecarVisitor = BoogieSidecarVisitor.newVisitor();
		sidecarVisitor.testSuite = this;
		parser.addSemanticVisitor(sidecarVisitor);
	}
	
	private BoolExpr[] getVersionImplications(int iteration) {
		ArrayList<BoolExpr> tempList = new ArrayList<BoolExpr>();
		
//		for (int i=0;i<=iteration;i++) {
//			// Loop through later iterations to see if it has been changed:
//			for(String mod : allCodeIterations.get(i).variablesModified) {
//				boolean modifiedLater = false;
//				for (int j=i+1;j<allCodeIterations.size();j++) {
//					if(allCodeIterations.get(j).variablesModified.contains(mod)) {
//						modifiedLater = true;
//						break;
//					}
//				}
//				if(modifiedLater) {
//					tempList.add(context.mkNot(context.mkBoolConst("version"+i+"_"+mod)));
//				} else {
//					tempList.add(context.mkBoolConst("version"+i+"_"+mod));
//				}
//				
//			}
//		}
		for(int i=0;i<allCodeIterations.size()-1;i++) {
			tempList.add(context.mkNot(context.mkBoolConst("version"+i)));
		}
		tempList.add(context.mkBoolConst("version"+currentIteration));
		//TODO: Move the current part out to its own method so it can loop through the methods instead of verifying all of them.
		for(String procedure : allCodeIterations.get(currentIteration).registeredMethods) {
			tempList.add(context.mkBoolConst("proc_"+procedure));
		}
		return tempList.toArray(new BoolExpr[tempList.size()]);
	}
	
	public void registerProcedure(String method) {
		allCodeIterations.get(currentIteration).addProcedure(method);
	}
	
	
//	public void registerVariableModification(String variable) {
////		System.out.println("variable "+variable + " being changed");
//		allCodeIterations.get(currentIteration).variablesModified.add(variable);
//	}
//	
	public String getVersion() {
		return "version"+currentIteration;
	}
	
//	public static BoolExpr[] versionControl() {
//		ArrayList<BoolExpr> tempList = new ArrayList<BoolExpr>();
//		// Add propositions for changes:
//		for(String str : currVersionModified) {
//
//			System.out.println("Curr "+str);
//			tempList.add(context.mkBoolConst(getVersionForVar(str)));
//		}
//		// Add propositions for unchanged:
//		for(int i = 0;i<prevVersionModified.size();i++){
//			HashSet<String> prev = prevVersionModified.get(i);
//			for(String str : prev) {
//				// This is really ugly code, replace: Search trough all hashsets above this one as well as prev to see if it has been modified
//				boolean notModifiedLater = true;
//				for(int j = i;j<prevVersionModified.size();j++){
//					if(prevVersionModified.get(j).contains(str)){
//						notModifiedLater = false;
//						break;
//					}
//				}
//
//				if(notModifiedLater && !currVersionModified.contains(str)) {
//					tempList.add(context.mkBoolConst("version"+i+"_"+str));
//				} else {
//					tempList.add(context.mkNot(context.mkBoolConst("version"+i+"_"+str)));
//				}
//
//			}
//		}
////		for(String str : prevVersionModified) {
////
////			System.out.println("Prev "+str);
////			if(!currVersionModified.contains(str)) {
////				// temp for now, shouldn't use previous version, should use the right version, make the sets into an array or something so several versions can be supported
////				tempList.add(context.mkBoolConst(getPrevVersionForVar(str)));
////			} else {
////				
////				tempList.add(context.mkNot(context.mkBoolConst(getPrevVersionForVar(str))));
////			}
////		}
//		int i = 0;
//		do {
//			tempList.add(context.mkBoolConst("version"+i));
//			i++;
//		} while (i<=currentVersion);
//		return tempList.toArray(new BoolExpr[tempList.size()]);
//	}
//	public static void switchVersion() {
//		prevVersionModified.add(currVersionModified);
//		currVersionModified.clear();
//		currentVersion++;
//	}
//	public static String getVersion(){
//		return "version"+currentVersion;
//	}
//	public static String getVersionForVar(String var){
//		return "version"+currentVersion+"_"+var;
//	}
//	
//	public static String getPrevVersionForVar(String var){
//		// Only for testing/development purposes, should be removed
//		return "version"+(currentVersion-1)+"_"+var;
//	}
//	
	public static List<ConcreteInput> generateSource(String input){

		ANTLRInputStream inputStream = new ANTLRInputStream(input);
		BoogieLexer lexer = new BoogieLexer(inputStream);
		CommonTokenStream tokens = new CommonTokenStream(lexer);
		BoogieParser parser = new BoogieParser(tokens);
		ParseTree tree = parser.program(); // begin parsing at rule 'r'
		if(DEBUG){
			System.out.println("------------PARSE TREE-------------");
			System.out.println(tree.toStringTree(parser)); // print LISP-style tree
			System.out.println("------------/PARSE TREE------------");
		}
		astInfoCollector.visit(tree);
		return astWalker.visit(tree);
	}
	
	
	private static void printSource(List<ConcreteInput> source) {
		System.out.println("-------");
		if(source == null) {
			System.out.println("Source code null");
		} else {
			System.out.println("Source code length: "+source.size());
			System.out.println(source); 
		}
		System.out.println("-------");
	}
	
	private CodeVersion newIteration(String program) {

		// Add in everything and patch
		currentIteration++;
		System.out.println("New iteration started: "+currentIteration);
		CodeVersion version = new CodeVersion(currentIteration, program);
		allCodeIterations.add(version);
		
		Patch<ConcreteInput> patch;
		if(currentIteration == 0) {
			patch = generatePatch(null, version);
		} else {
			patch = generatePatch(allCodeIterations.get(currentIteration-1), version);
		}
		parser.edit(patch);
		if(DEBUG) {
			System.out.println(solver.toString());
		}
		
		// Solve:
		BoolExpr[] assumptions = getVersionImplications(currentIteration);
		if(DEBUG) {
			System.out.print("Using the following assumptions: ");
			for(BoolExpr foo : assumptions) {
				System.out.print(" "+foo);
			}
			System.out.println();
		}
		
		System.out.print("Solving version: "+currentIteration);
		long stop, start = System.nanoTime();
		if(solver.check(assumptions) == Status.SATISFIABLE) {
			stop = System.nanoTime();
			System.out.print(" Result: SAT");
		} else {
			stop = System.nanoTime();
			System.out.print(" Result: UNSAT");
		}
		System.out.println(" result time: "+(stop-start));
		System.out.println("Nodes visited: "+sidecarVisitor.nodesVisited);

		sidecarVisitor.nodesVisited = 0;
		solver.check();
		
		return version;
	}

	private void run() {

		
		// Setup:
//		newIteration("axiom 1234;").printSource();
//		newIteration("axiom 12345;").printSource();
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures y == 1; modifies z; { x := 3; y := 3; z := 9; }");
//		printSource(newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 1;  { x := 1; x := 3; x:=9; }").sourceCode);
<<<<<<< HEAD
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 1;  { x := 1; x := 3; x:=9; }");
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 1001;  { x := 1; x:=x; }");
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 1001;  { x := 1; x:=x+1000+1; } ");
//		newIteration("var x : int; procedure P() returns () ensures x == 1001;  { x := 1; if(x == 1) { x := 1001; x:=3;if(x==3) {x := 1000;} x:=x+997; }} } ");
//		newIteration("var y: int; var x : int; procedure P() returns () ensures x == 1001;  { x := 2; if(x == 1) { y := 1011; } else {y:=3; x:=3;}}  ");
//		newIteration("var x : int; procedure P() returns () ensures x == 1001;  { x := 1; if(x == 1) { x:=8; if(x == 9) {x:=1001;}} } ");
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 1;  { x := 1; x := 3; x:=99; }");
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 9000;  { x := 1; x := 3; x:=9; x:=31;}");
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 9000;  { x := 1; x := x; x:=9; x:=x+8991;}");
		
		//Mul/divtest
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 25; {x := 5; y := 5; z := x * y;}"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 50; {x := 5; y := 5; z := x * x + y * 5;}"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 51; {x := 5; y := 5; z := x * x + y * 5 + 125 / 5 / 5 / x;}"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 15; {x := 5; y := 2; z:= x*y+x;}"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 35; {x := 5; y := 2; z:= x*y+x;}"); //Unsat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 35; {x := 5; y := 2; z:= x*(y+x);}"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 15; {x := 5; y := 2; z:= x+y*x;}"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 35; {x := 5; y := 2; z:= x+y*x;}"); //Unsat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 35; {x := 5; y := 2; z:= (x+y)*x;}"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 7; {x := 6; y := 2; z:= x/y+4;}"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 1; {x := 6; y := 2; z:= x/y+4;}"); //Unsat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 1; {x := 6; y := 2; z:= x/(y+4);}"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 7; {x := 6; y := 2; z:= x+y/2;}"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 4; {x := 6; y := 2; z:= x+y/2;}"); //Unsat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures z == 4; {x := 6; y := 2; z:= (x+y)/2;}"); //Sat
		
		
		//BasicMathTests
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 35; ensures y == 0; {x := 10 + 5*5; y := 10 - 5*2; }"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 26; ensures y == 25; {x := 10 + 5*5; y := x - 5*2; x := y+5/5; }"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 20; ensures y == 49; {x := 5*5-5; y := x - 5*2 + 10/2 - 3*3/3 + x*2 - 3; }"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 4; ensures y == 13; {x := 10/5-5+7/7*7; y := x/x+x*x-x; }"); //Sat
						
		
		//RelOptests
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x != y;{x := 5; y := 5; x := x + y;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x != y;{x := 5; y := 5;}"); //UnSat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x != y;{x := 10; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures y > x;{x := 10; y := 5;}"); //Unsat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x > y;{x := 10; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x < y;{x := 10; y := 5;}"); //Unsat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures y < x;{x := 10; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures y >= x;{x := 10; y := 5;}"); //Unsat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures y >= x;{x := 5; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x >= y;{x := 5; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x >= y;{x := 10; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures y <= x;{x := 10; y := 5;}"); //sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x <= y;{x := 10; y := 5;}"); //Unsat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x <= y;{x := 5; y :=5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures y <= x;{x := 5; y :=5;}"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x==z; ensures x!=y; ensures x <= z; ensures x >= z; ensures x > y; ensures y > z; ensures y<=z; ensures x>=y;  {x := 5; y:= 4; z :=5;}"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x==z; ensures x!=y; ensures x <= z; ensures x >= z; ensures x > y; ensures y < z; ensures y<=z; ensures x>=y;  {x := 5; y:= 4; z :=5;}"); //Sat
		
		//NotTest
//		newIteration("var x : int; var y : int; procedure P() returns () ensures !(x != y);{x := 5; y := 5; x := x + y;}"); //Unsat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures !(x != y);{x := 5; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures !(x != y);{x := 10; y := 5;}"); //Unsat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures !(y > x);{x := 10; y := 5;}"); //Sat
		
		//And/OrTests
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x==z && x != y && x <= z && x >= z && x > y && y > z && y <= z && x >= y;  {x := 5; y:= 4; z :=5;}"); //Sat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x==z && x!=y && x <= z && x >= z && x > y && y < z && y <= z && x >= y;  {x := 5; y:= 4; z :=5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x == 5 && y == 5;{x := 5; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x == 6 && y == 5;{x := 5; y := 5;}"); //Unsat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x == 5 && y == 6;{x := 5; y := 5;}"); //Unsat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x == 6 && y == 6;{x := 5; y := 5;}"); //Unsat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x == 5 || y == 5;{x := 5; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x == 5 || y == 6;{x := 5; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x == 6 || y == 5;{x := 5; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x == 6 || y == 6;{x := 5; y := 5;}"); //Unsat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x == 5 || (x == 5 && y == 5);{x := 5; y := 5;}"); //Sat 
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x == 6 || (x == 5 && y == 5);{x := 5; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x == 5 || (x == 6 && y == 5);{x := 5; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures x == 6 || (x == 6 && y == 5);{x := 5; y := 5;}"); //Unsat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures (x == 5 && y == 5) || (x == 5 && y == 5);{x := 5; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures (x == 6 && y == 5) || (x == 5 && y == 5);{x := 5; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures (x == 5 && y == 5) || (x == 5 && y == 6);{x := 5; y := 5;}"); //Sat
//		newIteration("var x : int; var y : int; procedure P() returns () ensures (x == 5 && y == 6) || (x == 5 && y == 6);{x := 5; y := 5;}"); //Unsat
		
		//While-tests
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 5;{x := 0; y := 0; z := 3; while (y <= z) invariant x-y == 0 && x >= 0; {x := z+1; y := y+1;} y:=10; }"); //Unsat
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 5;{x := 0; y := 0; z := 4; while (y <= z) invariant x-y == 0 && x >= 0; {x := x+1; y := y+1;} y:=10; }"); //Sat
//		newIteration("var x : int; procedure P() returns () ensures x == 5;{x := 0; while (x == 0) invariant x >= 0 && x <= 1; {x := 1;} x := 5; }"); //Sat 
//		newIteration("var x : int; procedure P() returns () ensures x == 5;{x := 0; while (x == 0) invariant x >= 0 && x <= 1; {x := 2;} x := 5; }"); //Unsat
//		newIteration("var x : int; procedure P() returns () ensures x == 5;{x := 0; while (x == 0) invariant x >= 0 && x <= 1; {x := 2;} x := 4; }"); //Unsat
		
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures y == 1; modifies z; { x := 1; x:= 3; x := 34;  }");
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures y == 1; modifies z; { z := 3; x := 3; }");
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures y == 1; modifies z; { z := 4; x := 9; }");
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures y == 1; modifies z; { x := 3; } procedure Foo() returns () ensures y == 1; modifies z; { z := 9; }");
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures y == 1; modifies z; { x := 4; } procedure Foo() returns () ensures y == 1; modifies z; { z := 9; }");
=======
		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 1; modifies x; { x := 4; if (x == 4) {assert x == 4;  x := 1;} }");
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 1; modifies x; { x := 1; x := 3; x:=9;  x := 1; if (x == 1) { assert 1 == 1;  } }");
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 999;  {x := 1; if(x == 1) { x := 3; if(x == 3) { x := 555; if (x == 555) { x:=999; } else { x := 100;} z := 0;}  else { x := 777;} z := 333;} else { x := 4;  z:= 999;} z:= 44;}");
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures x == 1;  { if(x == 1) { x := 3; if(x == 1) { x := 555;} else { x := 777;} z := 333;} else { x := 1;  z:= 999;} z:= 44;}");
		// Working if-else: newIteration("var x : int; var y : int; var z : int; procedure P(i : int, k : bool) returns () ensures x == 1;  { if(1==1) { x := 3; }  else { x := 3; } } ");
//		newIteration("var x : int; var y : int; var z : int; procedure P(i : int, k : bool) returns () ensures x == 1;  { if(1==2) { x := 3; } z := 99; if(1==1) { x := 1; } } ");
//		newIteration("var x : int; var y : int; var z : int; procedure P(i : int, k : bool) returns () { if(1==1) {assert x==3;}} ");
//		newIteration("var x : int; var y : int; var z : int; procedure P(i : int, g:bool) returns () ensures x == 3;   { x := 222+2000; i := 3; z:=Q(x+1); x := z+x; } "
//				+ "procedure Q(foo : int) returns (rets : int ) requires foo == x+1; ensures x == 2; ensures rets == 1; { rets := 1; } ");
//		newIteration("var x : int; var y : int; var z : int; procedure P(i : int, g:bool) returns () ensures x == 3;  { x := 222+2000; i := 3; call Q(1,3,x+1); x:= Q(1,3,3+1); x:=1;} "
//				+ "procedure Q(arg : int, args: int, foo : int) returns (rets : int ) requires foo == x+1; ensures x == 4; { x := arg; } ");
//		newIteration("var x : int; var y : int; var z : int; procedure P(i : int, g:bool) returns () ensures x == 3;  { x := 222+2000; i := 3; call Q(1,3,1); x:= Q(1,3,1); x:=1;} procedure Q(arg : int, args: int, foo : int) returns (rets : int ) requires foo == 1; ensures x == 4; { x := arg; } ");
//		newIteration("var x : int; var y : int; var z : int; procedure P(i : int, g:bool) returns () ensures x == 1;  { x := 222+2000; i := 3; call Q(1,3,2); x:=1;} procedure Q(arg : int, args: int, foo : int) returns (rets : int ) requires foo == 2; ensures x == 4; { x := arg; } ");

//		newIteration("var x : int; var y : int; var z : int; procedure P(i : int, k : bool) returns () ensures x == 1;  { x := 222+2000;  call Q(1,3,x+1); } procedure Q(arg : int, args: int, foo : int) returns () requires foo == x+1; ensures x == 4; { x := arg; } ");
//		newIteration("var x : int; var y : int; var z : int; procedure P(i : int, kork : bool) returns ()  ensures x == 9+9; { call x := Q(99,2,77); call y := Q(33,2,77);   x := x + y;} procedure Q(arg : int, args: int, fooo : int) returns (rets : int) requires fooo == 77;  ensures rets == 9; { x := arg; } ");
		
//		newIteration("var x : int; var y : int; var z : int; procedure P(i : int, kork : bool) returns () ensures x == 1;  { x:=9; x := 222+2000;  call Q(1,3,x+1); } procedure Q(arg : int, args: int, fooo : int) returns () requires fooo == 77;  { x := arg; } ");
//		newIteration("var x : int; var y : int; var z : int; procedure P(i : int, kork : bool) returns () ensures x == 1;  { x := 222+2000;  call Q(1,3,x+1); } procedure Q(arg : int, args: int, fooo : int) returns () requires fooo == 77;  { x := arg; } ");
//		newIteration("var x : int;  procedure P(z:bool) returns () ensures x == 1;  { x := 1; }");
//		System.out.println(astInfoCollector.procs.size());
//		System.out.println(astInfoCollector.procs.get("P").getPostconditions().size());

>>>>>>> calls
//		newIteration("var x : int; var y : int; var z : int; procedure P() returns () ensures y == 1; modifies z; { x := 3; y := 3; z := 10; } procedure Foo() returns () ensures y == 1; modifies z; { x := 3; y := 3; z := 9; }");

		
		// Larger programs:
//		newIteration("var x : int; var y : int; procedure P() returns () ensures y == 1; modifies p; { x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;  x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;}");
//		newIteration("var x : int; var y : int; procedure P() returns () ensures y == 1; modifies p; { x := 33; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;  x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;}");
//		newIteration("var x : int; var y : int; procedure P() returns () ensures y == 1; modifies p; { x := 33; y := 34; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;  x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;}");
//		CodeVersion version0 = new CodeVersion(0, program0);
	}
	
	private Patch<ConcreteInput> generatePatch(CodeVersion originalVersion, CodeVersion newVersion) {
		if(newVersion == null) {
			System.out.println("generatePatch requires newVersion to not be null");
		}
		Patch<ConcreteInput> patch = DiffUtils.diff(originalVersion == null ? new ArrayList<ConcreteInput>() : originalVersion.sourceCode, newVersion.sourceCode);
		if(DEBUG) {
			System.out.println("Patch size: " + patch.getDeltas().size());
		}
		System.out.println(patch.getDeltas());
		return patch;
	}
	
	public static void main(String[] args) {


		// TEST PROGRAM 1:
		System.out.println("===========================================================================================");
		System.out.println("=======================================TEST PROGRAM========================================");
		System.out.println("===========================================================================================");
		System.out.println("Test suite for incrementalBoogie");
		
		BoogieGrammar.getInstance();

		new TestMain().run();
//		List<ConcreteInput> sourcecodeGen1 = generateSource("axiom 1<==>1;");
//		List<ConcreteInput> sourcecodeGen2 = generateSource("axiom 1<==>2;");
//		List<ConcreteInput> sourcecodeGen3 = generateSource("axiom 1<==>1; \naxiom 1;");
//		printSource(sourcecodeGen1);
//		printSource(sourcecodeGen2);
		
		//Patch<ConcreteInput> patch = DiffUtils.diff(new ArrayList<ConcreteInput>(), sourcecodeGen1);
		
		// Sidecar:
		/*
//		parser.edit(0, 0, sourcecodeGen1.toArray());(())
		parser.edit(patch);
		ASTNode root = parser.getRoot();
		System.out.println("====== V1 ======");
		System.out.println("Source:");
		System.out.println(sidecarVisitor.getValue(root));
		
		
		System.out.println("====== V2 ======");
		System.out.println(sourcecodeGen1);
		System.out.println(sourcecodeGen3);
		patch = DiffUtils.diff(sourcecodeGen1, sourcecodeGen3);
		System.out.println(patch.getDeltas());
		System.out.println(patch.getDeltas().size());
		parser.edit(patch);
		root = parser.getRoot();
		System.out.println("Source:");
		System.out.println(sidecarVisitor.getValue(root));
		
		*/
		
		
		
//		List<ConcreteInput> testProgram = generateSource("axiom x == 1;");
//		List<ConcreteInput> testProgram2 = generateSource("axiom x == 2;");
//		List<ConcreteInput> testProgram = generateSource("var p : int; var q : int; procedure P() returns () ensures y == 1; modifies p; { x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;  x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;}");
//		List<ConcreteInput> testProgram2 = generateSource("var p : int; var q : int; procedure P() returns () ensures y == 1; modifies p; { x := 22; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;  x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;}");
//		List<ConcreteInput> testProgram3 = generateSource("var p : int; var q : int; procedure P() returns () ensures y == 1; modifies p; { x := 22; y := 3; x := 33; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;  x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;}");
//		List<ConcreteInput> testProgram4 = generateSource("var p : int; var q : int; procedure P() returns () ensures y == 1; modifies p; { x := 22; y := 9954; x := 9999; y := 994; x := 995; y := 997; x := 994; y := 9999; x := 992; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99;  x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99; x := 99; y := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;x := 99; y := 99; x := 99;}");
//		List<ConcreteInput> testProgram2 = generateSource("var p : int; var q : int; procedure P() returns () ensures y == 1; modifies p; { z:= 22; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;  x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3; x := 3; y := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;x := 3; y := 3; x := 3;}");
//		List<ConcreteInput> testProgram = generateSource("var x : int; var y : int; var z : int; procedure P() returns () ensures y == 1; modifies z; { x := 3; y := 3; z := 9; }");
//		List<ConcreteInput> testProgram2 = generateSource("var x : int; var y : int; var z : int; procedure P() returns () ensures y == 1; modifies z; {x := 3; y := 1; z := 9; }");
//		List<ConcreteInput> testProgram3 = generateSource("var x : int; var y : int; var z : int; procedure P() returns () ensures y == 1; modifies z; {x := 3; y := 1; z := 9; }");
//		List<ConcreteInput> testProgram4 = generateSource("var x : int; var y : int; var z : int; procedure P() returns () ensures y == 1; modifies z; {x := 3; y := 1; z := 9; }");

//		List<ConcreteInput> testProgram3 = generateSource("var p : int; var q : int; procedure P() returns () ensures y == 1; modifies p; { x := 3; y := 1; x := 4+1;}");
//		List<ConcreteInput> testProgram = generateSource("var p : int; var z: int;procedure P() returns () ensures p == 1; modifies p; { assert z == 3; assume x==1; p[foo] := 1;}");
//		List<ConcreteInput> testProgram = generateSource("var p : int; var z: int;procedure P() returns () ensures p == 1; modifies p; { if(bork){x:=1;} else if(bar){z:=1;}}");
//		List<ConcreteInput> testProgram = generateSource("var p : int; var z: int;procedure P() returns () ensures p == 1; modifies p; { if(bork){x:=1;} }");
//		List<ConcreteInput> testProgram = generateSource("var p : int; var z: int;procedure P() returns () ensures p == 1; modifies p; { assert x==1; }");
//		 List<ConcreteInput> testProgram = generateSource("axiom foo;procedure P() returns (bar : int) requires z; ensures p; modifies p; ensures z; requires z;{ if(z) {bar[3] := 1; } else if(asdf){z:=345; } assert 99; foo := 1;}");
//		List<ConcreteInput> testProgram = generateSource("axiom foo <==> foo ==>  boo && (zf < f) <= (1*11/4-1+8);");
//		List<ConcreteInput> testProgram = generateSource("axiom false || true;");
//		List<ConcreteInput> testProgram = generateSource("procedure P() returns () ensures p == 1; modifies p; { p := 1;}");
//		List<ConcreteInput> testProgram = generateSourceDebug("() returns (");
//		printSource(testProgram);
//		printSource(testProgram2);
//		Patch<ConcreteInput> patchTestProgram = DiffUtils.diff(new ArrayList<ConcreteInput>(), testProgram);

//		System.out.println("Patch size: "+patchTestProgram.getDeltas().size());
//		System.out.println(patchTestProgram.getDeltas());
//		if(patchTestProgram == null) {
//			System.out.println("the patch is null!");
//		}

//		parser.edit(patchTestProgram);
//		ASTNode rootTestProgram = parser.getRoot();
//		System.out.println(sidecarVisitor.getValue(rootTestProgram));

//		BoolExpr version1 = context.mkBoolConst(version);
//		
//		BoolExpr version1False = context.mkNot(version1);
//		
//		
//		// Invalid version:
//
//		IntExpr t2 = context.mkIntConst("t2");
//		IntExpr two = context.mkInt(22);
//
//		IntExpr three = context.mkInt(3);
//		BoolExpr eq = TestMain.context.mkEq(t2,two);
//		BoolExpr eq2 = TestMain.context.mkEq(t2,three);
//		solver.add(eq);
//		solver.add(eq2);

//		System.out.println("Solver: "+solver.toString());
	/*	BoolExpr[] versions = versionControl();
		for(BoolExpr foo : versions) {
			System.out.println("modified: "+foo);
		}
		System.out.print("Solving version "+currentVersion);
		long stop1, start1 = System.nanoTime();
		if(solver.check(versions) == Status.SATISFIABLE) {
			stop1 = System.nanoTime();
			System.out.print(" Result: SAT");
		} else {
			stop1 = System.nanoTime();
			System.out.print(" Result: UNSAT");
		}
		System.out.println(" result time: "+(stop1-start1));
		System.out.println("Nodes visited: "+sidecarVisitor.nodesVisited);

		sidecarVisitor.nodesVisited = 0;
		switchVersion();
		
		System.out.println("===========  VER2");
		version = "version2";
		Patch<ConcreteInput> patchTestProgram2 = DiffUtils.diff(testProgram, testProgram2);
		System.out.println("Patch2 size: "+patchTestProgram2.getDeltas().size());

		System.out.println(patchTestProgram2.getDeltas());
		if(patchTestProgram2 == null) {
			System.out.println("the patch is null!");
		}

		parser.edit(patchTestProgram2);
		System.out.println("Nodes visited2: "+sidecarVisitor.nodesVisited);
//		System.out.println("Solver: "+solver.toString());
		sidecarVisitor.nodesVisited = 0;
		versions = versionControl();
		for(BoolExpr foo : versions) {
			System.out.println("modified: "+foo);
		}
		System.out.print("Solving version "+currentVersion);
		long stop2, start2 = System.nanoTime();
		if(solver.check(versions) == Status.SATISFIABLE) {
			stop2 = System.nanoTime();
			System.out.print(" Result: SAT");
		} else {
			stop2 = System.nanoTime();
			System.out.print(" Result: UNSAT");
		}
		System.out.println(" result time: "+(stop2-start2));
		
		
		
		System.out.println("===========  VER3");
		switchVersion();
		Patch<ConcreteInput> patchTestProgram3 = DiffUtils.diff(testProgram2, testProgram3);
		if(patchTestProgram2 == null) {
			System.out.println("the patch is null!");
		}

		parser.edit(patchTestProgram3);
		System.out.println("Nodes visited3: "+sidecarVisitor.nodesVisited);

		sidecarVisitor.nodesVisited = 0;

		versions = versionControl();
		for(BoolExpr foo : versions) {
			System.out.println("modified: "+foo);
		}
		System.out.print("Solving version "+currentVersion);
		long stop3, start3 = System.nanoTime();
		if(solver.check(versions) == Status.SATISFIABLE) {
			stop3 = System.nanoTime();
			System.out.print(" Result: SAT");
		} else {
			stop3 = System.nanoTime();
			System.out.print(" Result: UNSAT");
		}
		System.out.println(" result time: "+(stop3-start3));
		
		
		System.out.println("===========  VER4");
		switchVersion();
		Patch<ConcreteInput> patchTestProgram4 = DiffUtils.diff(testProgram3, testProgram4);
		if(patchTestProgram2 == null) {
			System.out.println("the patch is null!");
		}

		parser.edit(patchTestProgram4);
		System.out.println("Nodes visited4: "+sidecarVisitor.nodesVisited);

		sidecarVisitor.nodesVisited = 0;

		versions = versionControl();
		for(BoolExpr foo : versions) {
			System.out.println("modified: "+foo);
		}
		System.out.print("Solving version "+currentVersion);
		long stop4, start4 = System.nanoTime();
		if(solver.check(versions) == Status.SATISFIABLE) {
			stop4 = System.nanoTime();
			System.out.print(" Result: SAT");
		} else {
			stop4 = System.nanoTime();
			System.out.print(" Result: UNSAT");
		}
		System.out.println(" result time: "+(stop4-start4)); */
		// Z3
		// TODO Tomorrow: write a small test here and have it solve
//		Context ctx = new Context();
//		IntExpr a = ctx.mkIntConst("a");
//		IntExpr b = ctx.mkIntConst("b");
//		IntExpr one = ctx.mkInt(1);
//		IntExpr two = ctx.mkInt(2);
//		IntExpr three = ctx.mkInt(3);
//		Solver solver = ctx.mkSolver();
//		solver.add(ctx.mkEq(a, one));
//
//		solver.add(ctx.mkEq(b, a));
//		solver.add(ctx.mkEq(b, two));
//
//		Model model = null;
//		if(solver.check() == Status.SATISFIABLE) {
//			System.out.println("SAT");
//		} else {
//			System.out.println("UNSAT");
//		}
////			
//		System.out.println("=======");
//		ConcreteInput var = ConcreteInput.newConcreteInput(BoogieGrammar.getInstance().var);
//		ArrayList<ConcreteInput> list1 = Lists.newArrayList(var);
//		ArrayList<ConcreteInput> list2 = Lists.newArrayList(var);
		// Patch<Integer> foobar = DiffUtils.diff(list1, list2);
//		System.out.println(testProgram.get(0));
//		System.out.println(testProgram2.get(0));
//		System.out.println(context.mkInt(1).equals(context.mkInt(1)));
	}
}
